apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-auth
  labels:
    app: postgres-auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-auth
  template:
    metadata:
      labels:
        app: postgres-auth
    spec:
      containers:
        - name: postgres-auth
          image: postgres:latest
          lifecycle:
            preStop:
              exec:
                # Остановка PostgreSQL перед завершением контейнера
                command: [ "sh", "-c", "pg_ctl stop -D /var/lib/postgresql/data -w -t 60 -m fast" ]
          terminationGracePeriodSeconds: 70
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-auth-config
            - secretRef:
                name: postgres-auth-secrets
          volumeMounts:
            - name: postgres-auth-data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command: [ "sh", "-c", 'pg_isready -U "$POSTGRES_USER" -d postgres ' ]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command: [ "sh", "-c", 'pg_isready -U "$POSTGRES_USER" -d postgres' ]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6

      volumes:
        - name: postgres-auth-data
          persistentVolumeClaim:
            claimName: postgres-auth-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-auth
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres-auth
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-auth-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
