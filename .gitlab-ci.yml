
variables:
  # Имя Docker Registry
  DOCKER_REGISTRY: registry.gitlab.com
  PROJECT_NAME: liza.antipa/yazikochesalna

stages:
  - build
  - package
  - deploy

.build-template: &build-template
  stage: build
  image: amazoncorretto:21-alpine
  script:
    - chmod +x ./gradlew
    - ./gradlew :$SERVICE_DIR:build -x test
  artifacts:
    paths:
      - "$SERVICE_DIR/build/libs/"

.build-buildah-template: &build-docker-template
  stage: package
  image: quay.io/buildah/stable:latest
  variables:
    XDG_RUNTIME_DIR: /tmp
  script:
    - cd "$SERVICE_DIR"
    - echo "Авторизация в Container Registry"
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - TAG_NAME=$(echo $CI_COMMIT_BRANCH | sed 's/\//./g')
    - IMAGE_PATH="$DOCKER_REGISTRY/$PROJECT_NAME/$DOCKER_IMAGE_NAME:$TAG_NAME"
    - echo "Образ $IMAGE_PATH"
    - echo "Сборка образа с Buildah"
    - buildah bud -t "$IMAGE_PATH" .
    - echo "Пуш образа в registry"
    - buildah push "$IMAGE_PATH"
    
# --- Определяем job для каждого сервиса --- #

build-frontend:
  stage: build
  image: node:20
  script:
    # Расшифровываем SSH-ключ
    - mkdir -p ~/.ssh
    - echo "$FRONTEND_SSH" | base64 --decode > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - mkdir -p ~/.ssh
    - |
      cat <<EOT > ~/.ssh/config
      Host gitlab.com
        IdentityAgent none
        StrictHostKeyChecking no
        UserKnownHostsFile=/dev/null
      EOT

    # Для дебага: покажет, что мы собираемся клонировать
    - echo "Cloning from git@gitlab.com:$FRONTEND_PROJECT.git"
    
    # Клонируем фронтенд
    - rm -rf frontend || true
    - git clone git@gitlab.com:$FRONTEND_PROJECT.git frontend
    
    - cd frontend
    # Перемещаем нужную папку внутрь frontend
    - mv messenger-front/* .
    # Убираем временные файлы
    - rm -rf messenger-front
    
    # Отключаем строгую проверку неиспользуемых переменных
    - sed -i 's/"noUnusedLocals": true/"noUnusedLocals": false/' tsconfig.json
    - sed -i 's/"noUnusedParameters": true/"noUnusedParameters": false/' tsconfig.json
    # Устанавливаем зависимости и собираем проект
    - npm ci
    - npm run build

  artifacts:
    paths:
      - frontend/dist/

# --- Определяем Docker сборку для каждого сервиса --- #

docker-frontend:
  <<: *build-docker-template
  variables:
    SERVICE_DIR: frontend
    DOCKER_IMAGE_NAME: frontend
  dependencies:
    - build-frontend
