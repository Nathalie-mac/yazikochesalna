
variables:
  # Имя Docker Registry
  DOCKER_REGISTRY: registry.gitlab.com
  PROJECT_NAME: liza.antipa/yazikochesalna

stages:
  - build
  - package
  - deploy

.build-template: &build-template
  stage: build
  image: amazoncorretto:21-alpine
  script:
    - chmod +x ./gradlew
    - ./gradlew :$SERVICE_DIR:build -x test
  artifacts:
    paths:
      - "$SERVICE_DIR/build/libs/"

.build-buildah-template: &build-docker-template
  stage: package
  image: quay.io/buildah/stable:latest
  variables:
    XDG_RUNTIME_DIR: /tmp
  script:
    - cd "$SERVICE_DIR"
    - echo "Авторизация в Container Registry"
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - TAG_NAME=$(echo $CI_COMMIT_BRANCH | sed 's/\//./g')
    - IMAGE_PATH="$DOCKER_REGISTRY/$PROJECT_NAME/$DOCKER_IMAGE_NAME:$TAG_NAME"
    - echo "Образ $IMAGE_PATH"
    - echo "Сборка образа с Buildah"
    - buildah bud -t "$IMAGE_PATH" .
    - echo "Пуш образа в registry"
    - buildah push "$IMAGE_PATH"
    
# --- Определяем job для каждого сервиса --- #

#build-authorization-service:
#  <<: *build-template
#  variables:
#    SERVICE_DIR: "authorization-service"
#
#build-chat-service:
#  <<: *build-template
#  variables:
#    SERVICE_DIR: "chat-service"
#
#build-message-storage-service:
#  <<: *build-template
#  variables:
#    SERVICE_DIR: "message-storage-service"
#
#build-messaging-service:
#  <<: *build-template
#  variables:
#    SERVICE_DIR: "messaging-service"
#
#build-user-service:
#  <<: *build-template
#  variables:
#    SERVICE_DIR: "user-service"
#
#
## --- Определяем Docker сборку для каждого сервиса --- #
#
#docker-authorization-service:
#  <<: *build-docker-template
#  variables:
#    SERVICE_DIR: "authorization-service"
#    DOCKER_IMAGE_NAME: "authorization-service"
#  dependencies:
#    - build-authorization-service
#
#docker-chat-service:
#  <<: *build-docker-template
#  variables:
#    SERVICE_DIR: "chat-service"
#    DOCKER_IMAGE_NAME: "chat-service"
#  dependencies:
#    - build-chat-service
#
#docker-message-storage-service:
#  <<: *build-docker-template
#  variables:
#    SERVICE_DIR: "message-storage-service"
#    DOCKER_IMAGE_NAME: "message-storage-service"
#  dependencies:
#    - build-message-storage-service
#
#docker-messaging-service:
#  <<: *build-docker-template
#  variables:
#    SERVICE_DIR: "messaging-service"
#    DOCKER_IMAGE_NAME: "messaging-service"
#  dependencies:
#    - build-messaging-service
#
#docker-user-service:
#  <<: *build-docker-template
#  variables:
#    SERVICE_DIR: "user-service"
#    DOCKER_IMAGE_NAME: "user-service"
#  dependencies:
#    - build-user-service
#
#docker-cassandra:
#  <<: *build-docker-template
#  variables:
#    SERVICE_DIR: "message-storage-service/cassandra"
#    DOCKER_IMAGE_NAME: "cassandra"
#

### --- Деплой --- ###


deploy-kustomize:
  stage: deploy
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: [""]
  script:
    # Проверка, что переменная установлена
    - |
      if [ -z "$KUBECONFIG_CONTENTS" ]; then
        echo "Ошибка: переменная KUBECONFIG_CONTENTS не установлена"
        exit 1
      fi

    # Переход в директорию с kustomization.yaml
    - cd k8s/overlays/dev
    # Проверяем путь к файлу
    - echo "Путь к encoded kubeconfig - $KUBECONFIG_CONTENTS"

    # Читаем содержимое и декодируем
    - mkdir -p ~/.kube
    - cat "$KUBECONFIG_CONTENTS" | base64 -d > ~/.kube/config
    - chmod 600 ~/.kube/config
    - export KUBECONFIG=~/.kube/config

    # Диагностические команды
    - kubectl version --client
    - kubectl config view
    - kubectl config current-context
    - kubectl config get-contexts
    - kubectl version
    
    # Проверяем текущий контекст kubectl
    - kubectl config current-context

    # Применяем манифесты с помощью kustomize
    - kubectl -n messenger delete secret gitlab-regcred
    - kubectl -n messenger apply -k .

